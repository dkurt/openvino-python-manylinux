name: CI

on: [push]

env:
  OPENVINO_BRANCH: 2021.2
  VERSION: 2021.2.1

jobs:
  build_lnx:
    name: Build (Linux)
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2

    - name: Build
      run: |
        docker build -t manylinux manylinux --build-arg VERSION=${{env.VERSION}} --build-arg OPENVINO_BRANCH=${{env.OPENVINO_BRANCH}}

    - name: Copy binaries
      run: docker run -v $(pwd):/mnt manylinux sh -c "cp /wheels/* /mnt"

    - uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: "*.whl"

  build_win:
    name: Build (Windows)
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2

    - name: Clone OpenVINO
      run: |
        git clone --depth 1 -b ${{env.OPENVINO_BRANCH}} https://github.com/openvinotoolkit/openvino/
        cd openvino
        git submodule update --init --recursive
        mkdir build && cd build

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build OpenVINO
      run: |
        cd openvino/build

        "${{env.pythonLocation}}\python.exe" -m pip install cython wheel

        cmake ^
          -DENABLE_VPU=OFF ^
          -DENABLE_CLDNN=OFF ^
          -DENABLE_SAMPLES=OFF ^
          -DENABLE_OPENCV=OFF ^
          -DENABLE_CPPLINT=OFF ^
          -DENABLE_PYTHON=ON ^
          -DPYTHON_EXECUTABLE="${{env.pythonLocation}}\python.exe" ^
          -DPYTHON_INCLUDE_DIR="${{env.pythonLocation}}\include" ^
          -DPYTHON_LIBRARY="${{env.pythonLocation}}\libs\python37.lib" ^
          -G "Visual Studio 16 2019" -A x64 ..

        cmake --build . --config Release -j 2
      shell: cmd

    - name: Build wheel
      run: |
        set OPENVINO_LIBS_DIR="%CD%\openvino\bin\intel64\Release"
        dir "%OPENVINO_LIBS_DIR%"
        "${{env.pythonLocation}}\python.exe" manylinux\setup.py build bdist_wheel
      shell: cmd


    # - name: Copy binaries
    #   run: docker run -v $(pwd):/mnt manylinux sh -c "cp /wheels/* /mnt"

    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: wheels
    #     path: "*.whl"


  test_ubuntu18:
    needs: build_lnx
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels

      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-numpy
          python3.6 -m pip install --upgrade pip
          python3.6 -m pip install *-cp36-cp36m-manylinux2014_x86_64.whl

      - name: Test
        run: python3.6 -c "from openvino.inference_engine import IECore; ie = IECore()"

  # test_debian10:
  #   needs: build_lnx
  #   runs-on: ubuntu-18.04
  #   container:
  #     image: docker://debian:10
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels

  #     - name: Install
  #       run: |
  #         apt-get update
  #         apt-get install -y python3 python3-pip python3-numpy
  #         python3.7 -m pip install --upgrade pip
  #         python3.7 -m pip install *-cp37-cp37m-manylinux2014_x86_64.whl

  #     - name: Test
  #       run: python3.7 -c "from openvino.inference_engine import IECore; ie = IECore()"

  # test_ubuntu20:
  #   needs: build_lnx
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels

  #     - name: Install
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y python3-numpy
  #         python3.8 -m pip install --upgrade pip
  #         python3.8 -m pip install *-cp38-cp38-manylinux2014_x86_64.whl

  #     - name: Test
  #       run: python3.8 -c "from openvino.inference_engine import IECore; ie = IECore()"


  # publish:
  #   if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
  #   needs: [test_ubuntu18, test_debian10, test_ubuntu20]
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels

  #     - name: Publish
  #       env:
  #         TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #         TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #       run: |
  #         python3 -m pip install twine
  #         python3 -m twine upload *.whl
